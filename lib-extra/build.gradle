import java.nio.file.Paths

plugins {
	id 'java-library'
	id 'dev.equo.p2deps'
	id 'de.undercouch.download' version '5.5.0'
}
ext.artifactId = project.artifactIdLibExtra
version = rootProject.spotlessChangelog.versionNext
apply from: rootProject.file('gradle/java-setup.gradle')
apply from: rootProject.file('gradle/java-publish.gradle')

String VER_SOLSTICE = '1.7.5'
dependencies {
	api projects.lib
	// misc useful utilities
	implementation "com.diffplug.durian:durian-core:${VER_DURIAN}"
	implementation "com.diffplug.durian:durian-collect:${VER_DURIAN}"
	// needed by GitAttributesLineEndings
	implementation "org.eclipse.jgit:org.eclipse.jgit:${VER_JGIT}"
	implementation "com.googlecode.concurrent-trees:concurrent-trees:2.6.1"
	// for eclipse
	implementation "dev.equo.ide:solstice:${VER_SOLSTICE}"

	// testing
	testImplementation projects.testlib
	testImplementation "org.junit.jupiter:junit-jupiter:${VER_JUNIT}"
	testImplementation "org.assertj:assertj-core:${VER_ASSERTJ}"
	testImplementation "com.diffplug.durian:durian-testlib:${VER_DURIAN}"
	testRuntimeOnly "org.junit.platform:junit-platform-launcher"
}
spotless {
	java {
		replaceRegex 'enforceSolsticeVersion', '"dev.equo.ide:solstice:(.*)"', '"dev.equo.ide:solstice:' + VER_SOLSTICE + '"'
	}
}

apply from: rootProject.file('gradle/special-tests.gradle')
tasks.withType(Test).configureEach {
	if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_16)) {
		// needed for EclipseCdtFormatterStepTest
		jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
	}
}

def NEEDS_P2_DEPS = [
	// (alphabetic order please)
	'cdt',
	'groovy',
	'jdt'
]
for (needsP2 in NEEDS_P2_DEPS) {
	sourceSets.register(needsP2) {
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
		java {}
	}
	dependencies {
		add("${needsP2}CompileOnly", "dev.equo.ide:solstice:${VER_SOLSTICE}")
	}
}

def jar = tasks.named('jar', Jar) {
	for (needsP2 in NEEDS_P2_DEPS) {
		from sourceSets.named(needsP2).map { it.output.classesDirs }
	}
	from sourceSets.named('oraclesql').map { it.output.classesDirs }
}

tasks.withType(Test).configureEach {
	dependsOn jar
	classpath += jar.get().outputs.files
}

apply plugin: 'dev.equo.p2deps'
p2deps {
	// (alphabetic order please)
	into 'cdtCompileOnly', {
		p2repo 'https://download.eclipse.org/eclipse/updates/4.26/'
		p2repo 'https://download.eclipse.org/tools/cdt/releases/10.7/'
		install 'org.eclipse.cdt.core'
	}
	into 'groovyCompileOnly', {
		p2repo 'https://download.eclipse.org/eclipse/updates/4.26/'
		p2repo 'https://groovy.jfrog.io/artifactory/plugins-release/org/codehaus/groovy/groovy-eclipse-integration/4.8.0/e4.26/'
		install 'org.codehaus.groovy.eclipse.refactoring'
		install 'org.codehaus.groovy.eclipse.core'
		install 'org.eclipse.jdt.groovy.core'
		install 'org.codehaus.groovy'
	}
	into 'jdtCompileOnly', {
		p2repo 'https://download.eclipse.org/eclipse/updates/4.26/'
		install 'org.eclipse.jdt.core'
	}
}

String VER_ORACLE_SQLCL = '23.3.0.270.1251'
tasks.register('fetchSqlcl') {
	description 'Download SQLcl.'
	outputs.cacheIf { true }
	outputs.file(layout.buildDirectory.file('tmp/sqlcl.zip'))
	doLast {
		println 'Download SQLcl.'
		download.run {
			src "https://download.oracle.com/otn_software/java/sqldeveloper/sqlcl-${VER_ORACLE_SQLCL}.zip"
			dest layout.buildDirectory.file('tmp/sqlcl.zip')
		}
	}
}

tasks.register('unpackDbtoolsCommon') {
	description 'Extract dbtools-common from sqlcl archive.'
	dependsOn tasks.fetchSqlcl
	doLast {
		println 'Extract dbtools-common from sqlcl archive.'
		copy {
			from(zipTree(fetchSqlcl.outputs.files.singleFile)) {
				include '**/dbtools-common.jar'
				includeEmptyDirs = false
			}
			into layout.buildDirectory.file('tmp')
		}
		copy {
			from zipTree(layout.buildDirectory.file('tmp/sqlcl/lib/dbtools-common.jar')).matching {
				include '**/pom.xml', '**/pom.properties'
			}.files
			into layout.buildDirectory.dir('tmp/sqlcl/lib')
		}

		Properties props = file(layout.buildDirectory.dir('tmp/sqlcl/lib/pom.properties')).withReader {
			def props = new Properties()
			props.load(it)
			return props
		}

		String groupId = props.get('groupId')
		String artifactId = props.get('artifactId')
		String version = props.get('version')
		copy {
			from layout.buildDirectory.dir('tmp/sqlcl/lib')
			include 'dbtools-common.jar', 'pom.xml'
			into Paths.get(repositories.mavenLocal().getUrl())
					.resolve(groupId.replace('.', File.separator))
					.resolve(artifactId)
					.resolve(version)
			rename { String fileName ->
				String newName = artifactId + '-' + version
				if (fileName.endsWith('.xml')) {
					return newName + '.pom'
				}
				return newName + '.jar'
			}
		}
	}
	doNotTrackState("Don't track state")
}

sourceSets.register('oraclesql') {
	compileClasspath += sourceSets.main.output
	runtimeClasspath += sourceSets.main.output
	java {}
}
dependencies {
	oraclesqlCompileOnly files(layout.buildDirectory.dir('tmp/sqlcl/lib/dbtools-common.jar'))
}

tasks.compileOraclesqlJava.configure {
	dependsOn 'unpackDbtoolsCommon'
}

// we'll hold the core lib to a high standard
spotbugs {
	// LOW|MEDIUM|DEFAULT|HIGH (low = sensitive to even minor mistakes).
	reportLevel = com.github.spotbugs.snom.Confidence.valueOf('LOW')
}

